// ---------------------------------------------------------------------------
// Edit this file to define your game. It should have at least four
// sets of content: undum.game.situations, undum.game.start,
// undum.game.qualities, and undum.game.init.
// ---------------------------------------------------------------------------

/* Definitions and aliases for data used below. */

var FUDGE_WORDS = [
    'terrible','bad','poor','mediocre','fair','good','great','superb','awesome'
];

// ---------------------------------------------------------------------------
/* The situations that the game can be in. Each has a unique ID. */
undum.game.situations = {
    start: new undum.SimpleSituation(
        "<img src='media/tutorial/woodcut.png' class='float_right'>\
         <p>Welcome to the Undum tutorial. Undum is a tool for writing\
         hypertext interactive fiction. It has some unique features\
         and a look and feel designed to make it easy to write narrative\
         games.</p>\
         \
         <p>Hypertext interactive fiction is the digital equivalent of the\
         Choose Your Own Adventure (CYOA) books that were popular in the\
         1980s. The story is told in chunks, and you select from a range\
         of options to move it forward. Unlike the book form, however, the\
         digital form gives you far more flexibility to tell rich stories\
         and introduce more gaming idioms.</p>\
         \
         <p class='transient'>For now, lets move on with the tutorial.\
         <a href='situations'>Click this link</a> to move on.</p>",
         {
             heading: "Starting Out with Undum"
         }
     ),
     situations: new undum.SimpleSituation(
         "<p>In Undum, all interaction takes place in a situation. You can think\
         of it either as a 'Room' in traditional interactive fiction\
         (although it is less flexible than that), or as a 'Page'\
         in a Choose Your Own Adventure book (though it is more flexible than\
         that). At any point in time, the character is in exactly one\
         situation, and that situation is responsible for everything that\
         happens to the player. Situations are chunks of code that\
         generate the output you are reading here. For example, this text was\
         generated by the <em>enter</em> method of the first situation.<p>\
         \
         <p class='transient'>Lets <a href='todo'>move on again</a>.</p>",
         {
             heading: "Situations"
         }
     ),
     todo: new undum.ActionSituation(
         "<p>Two things can happen in a situation. You either\
         <a href='links'>leave</a> the situation and enter another one, or\
         you carry out some <a href='./do-something'>action</a>. Actions may \
         perform some processing, they may display some results, but\
         ultimately they put you back into the same situation\
         again.</p>\
         \
         <p>When you are designing you game, use situations to reflect a\
         change in what the player can do. So you would change situation if\
         the player pulls a lever to open a trapdoor, for example. Actions\
         are intended for situations where the player can examine things\
         more closely, or maybe top up their magic by drinking a potion.\
         Things that don't affect the state of the world around them.</p>\
         \
         <p>Situations generate content when they are <em>enter</em>ed, \
         <em>exit</em>ed, and when they receive an <em>act</em>ion (the \
         italicised words are the names of the three methods that do this).\
         You can write code to generate content in any way you like, so the\
         content that is displayed can be totally dynamic: taking into \
         account the current state of the character.\
         Content is just plain HTML, so you use regular HTML tags to make\
         things <strong>bold</strong> or <em>italic</em>, or to include\
         images. This gives you a lot of flexibility. For example, since Undum\
         targets HTML5 browsers, you could use the <em>audio</em> or \
         <em>video</em> tags to include rich media.</p>\
         \
         <p class='transient'>Make sure you've carried out the action above, \
         then <a href='links'>continue</a>.</p>",
         {'do-something': "<p>You carried out the action, well done. You'll\
                           notice that the links for this situation are still\
                           active. This means you can click to perform the\
                           action again.</p>"}
    ),
    links: new undum.SimpleSituation(
         "<p>If you've been watching carefully, you will have noticed that \
         parts of the text have been disappearing when you move between \
         situations. This isn't a bug! One of the aims of Undum is to give\
         game designers the ability to make the transcript of\
         the game read as a coherent piece of narrative. However, you often\
         need chunks of text that do nothing but offer the reader choices.\
         Undum defines a special CSS class to add to your HTML for this\
         (remember generated content is just HTML). It is <em>transient</em>,\
         and can be applied to paragraphs, <em>div</em>s, or just\
         <em>span</em>s<span class='transient'> (such as this one)</span>.</p>\
         \
         <p>You may also have noticed that, when you move situations, all the\
         links in the previous situation turn into regular text. This is to\
         stop you backtracking and trying previous options when you've already\
         committed to one. In other H-IF systems, this is\
         done by completely removing the content from previous pages.\
         That prevents you going back and reading your story, however.</p>\
         \
         <p class='transient'>Let's learn more about these links, and \
         see how to <a href='sticky'>change that</a> behaviour.</p>"
    ),
    sticky: new undum.SimpleSituation(
         "<p>There are three types of link in Undum. The first two we've seen:\
         links to change situation and links to carry out an action. When you\
         include a link in your output, Undum parses it and wires it up\
         correctly. If you create a link with a HTML <em>href</em> attribute\
         containing just a name ('ballroom', for\
         example) this will send the character to the situation with that \
         name. Links \
         with two components ('ballroom/view-painting', for example) send \
         the character to a new situation <em>and then</em> carry out the \
         named action ('view-painting' in this case). To carry out an action\
         in the current situation, you can replace the situation name with a\
         dot (so it would be './view-painting'). In all cases, if the \
         character is already in that situation, then the situation's \
         <em>enter</em> method won't be called again.</p>\
         \
         <p>The third type of link, then, is a general hyperlink. If your\
         link doesn't consist of a single element or pair of elements, as\
         above, then Undum will guess that you have a normal hyperlink. As \
         <a href='http://news.bbc.co.uk' class='sticky'>in this link</a>.\
         If you have a link that <em>does</em> look like an Undum link, you\
         can force Undum not to interpret it as an action or situation move,\
         by adding the CSS style <em>raw</em> to the HTML <em>a</em> tag.\
         links that don't have the <em>raw</em> class, but that are considered\
         to be non-Undum links (like the BBC example), will have <em>raw</em>\
         added to them before display. This could allow you to style external\
         links differently, for example.</p>\
         \
         <p>In the last situation I said you can prevent links from being\
         turned into regular text when you move situations. This is done\
         by another CSS style: <em>sticky</em>. When you \
         <a href='qualities'>leave this situation</a>, you'll notice the BBC\
         link stays active. This can allow you to have options that stay\
         valid throughout the narrative, for example, such as a spell to\
         teleport home.</p>"
     ),
     qualities: new undum.ActionSituation(
         "<p>That's enough about situations. Let's talk about the character.\
         The character is described by a series of <em>qualities</em>. These\
         are numeric values that can describe anything from natural abilities\
         to how much of a resource the character controls. Qualities are\
         shown in the box on the right of the text.</p>\
         \
         <p>The qualities there are those you started the game with. When you\
         <a href='quality-types'>go to the next situation</a>, keep your\
         eyes on this box. You'll notice I'll give you a boost of your\
         stamina quality. This process is animated and highlighted to \
         draw your attention to it. You could also get a boost of skill\
         by carrying out <a href='./skill-boost'>this action</a> as many\
         times as you like.</p>",
         {
             "skill-boost": function(character, system, action) {
                system.setQuality("skill", character.qualities.skill+1);
             }
         },
         {
             heading: "Qualities",
             exit: function(character, system, to) {
                system.setQuality("stamina", character.qualities.stamina+1);
                return true;
             }
         }
    ),
    "quality-types": new undum.ActionSituation(
         "<p>Not all the qualities in the character panel are displayed as \
         numeric. Internally they are all numeric, but different qualities \
         get to choose how to display themselves. So 'Luck', for example, is \
         words (based on the FUDGE RPG), and 'Novice' is using just a tick.\
         </p>\
         \
         <p>To see how 'Luck' changes, try using\
         <a href='./luck-boost'>luck-boosting action</a> or a \
         <a href='./luck-reduce'>luck-reducing action</a> to see that\
         luck uses a numeric bonus when it runs out of words. There are a\
         of different display types provided with Undum, and you can easily\
         add your own too.</p>\
         \
         <p>When you <a href='character-text'>leave this situation</a>,\
         I'll set 'Novice' to zero. Watch\
         the character panel, and you'll see that Novice decides it doesn't\
         need to be displayed any more and will be removed. You will also see\
         that when the last\
         quality in a group is removed ('Novice' is in the 'Progress' group),\
         then the group heading is also removed. You can tell Undum what\
         group each quality belongs to, and what order they should be listed.\
         <p>",
         {
             "luck-boost": function(character, system, action) {
                 system.setQuality("luck", character.qualities.luck+1);
             },
             "luck-reduce": function(character, system, action) {
                 system.setQuality("luck", character.qualities.luck-1);
             }
         },
         {
             exit: function(character, system, to) {
                 system.setQuality("novice", 0);
                 return true;
             }
         }
     ),
     "character-text": new undum.SimpleSituation(
         "<p>Above the list of qualities is a short piece of text, called\
         the character-text. This describes the character in some way. It\
         can be set by any action or when entering or leaving a situation.\
         It is just regular HTML content, as for all text in Undum. It can\
         also contain Undum links, so this is another place you can put\
         actions that the character can carry out over a long period of time.\
         </p>\
         <p class='transient'>Let's go to the\
         <a href='progress'>next situation</a>. As you do, I'll change the \
         character text. Notice that it is highlighted, just the same as\
         when a quality is altered.</p>",
         { 
             exit: function(character, system, to) {
                 system.setCharacterText(
                     "<p>We're nearing the end of the road.</p>"
                     );
                 return true;
             }
         }
     ),
     "progress": new undum.SimpleSituation(
         "<p>Sometimes you want to make a change in quality a more\
         significant event. You can do this by animating the change in\
         quality. If you <a href='boost-stamina'>boost your stamina</a>,\
         you will see the stamina change in the normal\
         way in the character panel. But you will also see a progress\
         bar appear and animate below.</p>",
         {
            exit: function(character, system, to) {
                system.animateQuality(
                    'stamina', character.qualities.stamina+1
                );
                return true;
            }
         }
     ),
     "boost-stamina": new undum.SimpleSituation(
         "<p>The progress bar is also useful in situations where the\
         character block is displaying just the whole number of a quality,\
         whereas some action changes a fraction. If the quality is displaying\
         the character's level, for example, you might want to show a progress\
         bar to indicate how near the character is to levelling up.</p>\
         \
         <p>After a few seconds, the progress bar disappears, to keep the\
         focus on the text. Undum isn't designed for games where a lot of\
         statistic management is needed. If you want a change to be part\
         of the permanent record of the game, then write it in text.</p>\
         \
         <p>Now we're almost at the end of the road. But so\
         far you have moved through this tutorial linearly - from one \
         situation to the next, without any choice. Undum is designed to\
         support narratives that branch and merge. \
         <span class='transient'>As a tiny illustration\
         of this, choose now between going forward to <a href='one'>option\
         one</a> or <a href='two'>option two</a>.</span></p>"
     ),
     "one": new undum.SimpleSituation(
         "<p>You chose option one, which is probably for the best, since\
         option two would have crashed the browser and wiped your hard-drive.\
         </p>\
         <p>From here it is just a <a href='saving'>short step</a> to the\
         final bits of content in this tutorial.</p>",
         {
             heading: "Option One"
         }
     ),
     "two": new undum.SimpleSituation(
         "<p>You chose option two, which is my favourite option as well.\
         I find the photographs accompanying option one to be too disturbing.\
         Finger nails just shouldn't bend that way...</p>\
         <p>From here it is just a <a href='saving'>short step</a> to the\
         final bits of content in this tutorial.</p>",
         {
             heading: "Option Two"
         }
     ),
     "saving": new undum.SimpleSituation(
         "<p>The only piece of the UI we haven't talked about is the 'Save'\
         and 'Erase' buttons on the left panel. These are only visible if\
         your browser supports client-side data storage. Clicking 'Save'\
         stores your game, so you can pick it up again later. There is no\
         'Load' button, the game loads when the page loads. There is also\
         no way to save multiple games, and select which one you want to play.\
         </p>\
         \
         <p>More seriously, because of the limitation in the storage capacity\
         provided by browsers, you only get one save, even if you have lots\
         of different games. So if you save from one game, then open a\
         different game file, chances are things will crash. You'll have to\
         Erase your file first. This is a limitation I'll address if I have\
         time. I also want, at some point, to add the ability to save\
         games to the server, and access them via a unique id.</p>\
         \
         <p class='transient'>Time for the <a href='last'>last section</a>.\
         </p>"
     ),
     "last": new undum.SimpleSituation(
         "<p>So that's it. We've covered all of Undum. This situation is the \
         end, because it has no further links. The 'The End' message is \
         just in the HTML output of this situation, it isn't anything special\
         to Undum</p>\
         <p>I've added an\
         inspiration quality to your character list. Its time for you to \
         crack open the game file and write your own story.</p>\
         <h1>The End</h1>",
         {
            enter: function(character, system, from) {
                system.setQuality("inspiration", 1);
                system.setCharacterText(
                    "<p>You feel all inspired, why not have a go?</p>"
                );
            }
        }
     )
};

// ---------------------------------------------------------------------------
/* The Id of the starting situation. */
undum.game.start = "start";

// ---------------------------------------------------------------------------
/* Here we define all the qualities that our characters could
 * possess. We don't have to be exhaustiv, but if we miss one out then
 * that quality will never show up in the character bar in the UI. */
undum.game.qualities = {
    skill: new undum.IntegerQuality(
        "Skill", {priority:"0001", group:'stats'}
    ),
    stamina: new undum.NumericQuality(
        "Stamina", {priority:"0002", group:'stats'}
    ),
    luck: new undum.WordScaleQuality(
        "Luck", FUDGE_WORDS, {offset:-4, priority:"0003", group:'stats'}
    ),

    inspiration: new undum.IntegerQuality(
        "Inspiration", {priority:"0001", group:'progress'}
    ),
    novice: new undum.OnOffQuality(
        "Novice", {priority:"0002", group:'progress', onValue:"&#10003;"}
    )
};

// ---------------------------------------------------------------------------
/* The qualities are displayed in groups in the character bar. This
 * determines the groups, their heading (which can be null for no
 * heading) and ordering. QualityDefinitions without a group appear at
 * the end. It is an error to have a quality definition belong to a
 * non-existent group. */
undum.game.qualityGroups = {
    stats: new undum.QualityGroup(null, {priority:"0001"}),
    progress: new undum.QualityGroup('Progress', {priority:"0002"})
};

// ---------------------------------------------------------------------------
/* This function gets run before the game begins. It is normally used
 * to configure the character at the start of play. */
undum.game.init = function(character, system) {
    character.qualities.skill = 12;
    character.qualities.stamina = 12;
    character.qualities.luck = 0;
    character.qualities.novice = 1;
    system.setCharacterText("<p>You are starting on an exciting journey.</p>");
};
