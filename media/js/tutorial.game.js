// ---------------------------------------------------------------------------
// Edit this file to define your game. It should have at least four
// sets of content: undum.game.situations, undum.game.start,
// undum.game.qualities, and undum.game.init.
// ---------------------------------------------------------------------------

/* Definitions and aliases for data used below. */

var FUDGE_WORDS = [
    'terrible','bad','poor','mediocre','fair','good','great','superb','awesome'
];

// ---------------------------------------------------------------------------
/* The situations that the game can be in. Each has a unique ID. */
undum.game.situations = {
    start: new undum.ActionSituation(
        "<p>Welcome to the UNDUM tutorial. This text was generated by\
         the <em>enter</em> method of the first situation. All interaction \
         takes place in a situation. You can think of it either as a 'Room' in\
         regular IF (although it is less flexible than that), or as a 'Page'\
         in a Choose Your Own Adventure book (though it is more flexible than\
         that.<p>\
         \
         <p>Two things happen in a situation. You either\
         <a href='leave'>leave</a> the situation for another one, or else\
         you carry out some <a href='./act'>action</a>. Actions perform\
         some processing, they may display some results, but\
         ultimately they put you back into the same situation\
         again.</p>\
         \
         <p class='transient'>This paragraph gives you some\
         options to click. Because the paragraph HTML tag has the\
         <em>transient</em> CSS class, they are removed when you move\
         out of this situation, so\
         that the text that remains is more pleasing to read. To stop \
         the player using links from old situations, you'll also notice \
         that the links in the previous paragraph turn into plain text \
         when you <a href='leave'>go</a> (you can stop this behavior by \
         giving a link the <em>sticky</em> CSS class - particularly useful \
         for offsite links). So what now? You could\
         <a href='./act'>carry out an action</a>, use a link to go\
         <a href='http://news.bbc.co.uk/' class='raw'>off site</a>\
         (offsite links could be styled differently, but currently aren't).\
         Or you could <a href='leave'>go to the next situation</a>.\
         </p>",

        // Responses to action codes:
        {
            act: function(character, system, action) {
                system.scrollHere();
                system.write(
                    "<p>You have carried out an action. This doesn't change\
                     the situation, but may modify the character in some\
                     way, and may generate some output. In this case\
                     I am increasing your 'luck' score, and you should see\
                     both an animation below, and the score changing in the\
                     qualities list to the right.</p>"
                );
                system.animateQuality("luck", character.qualities.luck + 1);
                system.write(
                    "<p>I am also removing the 'novice' quality (you can\
                    see it go from the character panel in the top right.</p>"
                );
                system.setQuality('novice', 0);

                // We don't have to return content here, we could just do
                // another write and return null. Either way has the same
                // effect.
                return "<p>And that's us done for this action. Because we end\
                    up in the same situation, you can click the action to \
                    repeat it. If you want to limit the user so they can't \
                    do the same thing again, it is best to send the user to \
                    another situation.</p>";
            }
        },

        // Other options and function overrides:
        {
            heading: "Starting Out with Undum",
            exit: function(character, system, from) {
                system.setQuality("inspiration", 1);
                system.setCharacterText(
                    "<p>You feel all inspired, why not have a go?</p>"
                );
                return true;
            },
        }
    ),

    leave: new undum.SimpleSituation(
        "<p>This is the end of this tutorial. Have a dig through the code, \
        particularly <em>undum.js</em>, for more details.</p>"
    )
};

// ---------------------------------------------------------------------------
/* The Id of the starting situation. */
undum.game.start = "start";

// ---------------------------------------------------------------------------
/* Here we define all the qualities that our characters could
 * possess. We don't have to be exhaustiv, but if we miss one out then
 * that quality will never show up in the character bar in the UI. */
undum.game.qualities = {
    skill: new undum.IntegerQuality(
        "Skill", {priority:"0001", group:'stats'}
    ),
    stamina: new undum.NumericQuality(
        "Stamina", {priority:"0002", group:'stats'}
    ),
    luck: new undum.WordScaleQuality(
        "Luck", FUDGE_WORDS, {offset:-4, priority:"0003", group:'stats'}
    ),

    inspiration: new undum.IntegerQuality(
        "Inspiration", {priority:"0001", group:'progress'}
    ),
    novice: new undum.OnOffQuality(
        "Novice", {priority:"0002", group:'progress', onValue:"&#10003;"}
    )
};

// ---------------------------------------------------------------------------
/* The qualities are displayed in groups in the character bar. This
 * determines the groups, their heading (which can be null for no
 * heading) and ordering. QualityDefinitions without a group appear at
 * the end. It is an error to have a quality definition belong to a
 * non-existent group. */
undum.game.qualityGroups = {
    stats: new undum.QualityGroup(null, {priority:"0001"}),
    progress: new undum.QualityGroup('Progress', {priority:"0002"})
};

// ---------------------------------------------------------------------------
/* This function gets run before the game begins. It is normally used
 * to configure the character at the start of play. */
undum.game.init = function(character, system) {
    character.qualities.skill = 12;
    character.qualities.stamina = 12;
    character.qualities.luck = 0;
    character.qualities.novice = 1;
    system.setCharacterText("You are starting on an exciting journey.");
};
